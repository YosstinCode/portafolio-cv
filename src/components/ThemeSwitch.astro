---
import Theme from "@/icons/themeSwitch.astro";
---
<link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>

<div id="select-menu-theme" class="w-40">
    <div id="select-btn-theme" class="group flex h-10 p-5 text-lg rounded-lg items-center justify-between cursor-pointer border border-solid border-gray-400 ">
        <div class="sBtn-text-theme flex gap-2 items-center">
            <Theme />
            <span id="initialOption-theme">System</span>
        </div>
        <i class="bx bx-chevron-up text-sm transition rotate-180"></i>
    </div>
    <ul class="options-theme max-w-40 relative p-1 mt-3 rounded-lg border border-solid border-gray-400 opacity-0 invisible transition-all">
        {
            ['Dark', 'Light', 'System'].map((mode) => {
                return (
                    <li class="option-theme group flex items-center h-14 cursor-pointer py-0 px-4 rounded-lg hover:bg-skin-hue transition hover:transition-all" id={mode}>
                        <span class="option-text-theme group-hover:text-skin-inverted group-hover:dark:text-gray-700 text-skin-base">
                            {mode}
                        </span>
                    </li>
                )
            })
        }
    </ul>
</div>
<style>
    :global(.dark) {
        color-scheme: dark;
    }
</style>
<script is:inline>
    const optionMenuTheme = document.querySelector("#select-menu-theme");
    const selectBtnTheme = optionMenuTheme?.querySelector("#select-btn-theme");
    const panelOptionTheme = optionMenuTheme?.querySelector(".options-theme");
    const optionsTheme = optionMenuTheme?.querySelectorAll(".option-theme");
    const initialOptionTheme = document.getElementById("initialOption-theme");
    const chevronTheme = selectBtnTheme?.querySelector(".bx-chevron-up");

    // Configura el tema inicial
    const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    const storedTheme = localStorage.getItem("theme") || "system";
    updateTheme(storedTheme);
    
    if (initialOptionTheme) initialOptionTheme.textContent = capitalize(storedTheme);
    

    // Abre y cierra el menú
    selectBtnTheme?.addEventListener("click", () => {
        panelOptionTheme?.classList.toggle("invisible");
        panelOptionTheme?.classList.toggle("opacity-0");
        panelOptionTheme?.classList.toggle("opacity-100");
        chevronTheme?.classList.toggle("rotate-180");
    });
    
    // Cambia el tema al seleccionar una opción
    optionsTheme?.forEach((option) => {
        option.addEventListener("click", (e) => {
            const selectedOption = (e?.currentTarget)?.textContent?.trim() || '';
            
            if (initialOptionTheme) initialOptionTheme.textContent = selectedOption;
            
            updateTheme(selectedOption.toLowerCase());
            panelOptionTheme?.classList.add("invisible", "opacity-0");
            panelOptionTheme?.classList.remove("opacity-100");
            chevronTheme?.classList.toggle("rotate-180");
        });
    });

    // Función para actualizar el tema
    function updateTheme(value) {
        const theme = value === "system" ? systemTheme : value;
        document.documentElement.classList.remove("light", "dark");
        document.documentElement.classList.add(theme);
        localStorage.setItem("theme", value);
    }

    // Función para capitalizar texto
    function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
</script>
